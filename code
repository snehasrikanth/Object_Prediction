import numpy as np
from math import exp

def filter_2d(im, kernel):
   
    M = kernel.shape[0] 
    N = kernel.shape[1]
    H = im.shape[0]
    W = im.shape[1]
    
    filtered_image = np.zeros((H-M+1, W-N+1), dtype = 'float64')
    
    for i in range(filtered_image.shape[0]):
        for j in range(filtered_image.shape[1]):
            image_patch = im[i:i+M, j:j+N]
            filtered_image[i, j] = np.sum(np.multiply(image_patch, kernel))
            
    return filtered_image

def convert_to_grayscale(im):
    
    return np.mean(im, axis = 2)

def gkernal2(size, sigma):
    '''
    Create a gaussian kernel of size x size. 
    Args: 
    size = must be an odd positive number
    sigma = standard deviation of gaussian in pixels
    Returns: A floating point (size x size) guassian kernel 
    ''' 
    #Make kernel of zeros:
    kernel = np.zeros((size, size))
    
    #Handle sigma = 0 case (will result in dividing by zero below if unchecked)
    if sigma == 0:
        return kernel 
    
    index = int((size-1)/2)
    
    for i in range(size):
        for j in range(size):
            kernel[i, j] = (1/(2*np.pi*sigma**2))*exp(-((i-index)**2 + (j-index)**2)/(2*sigma**2))
            
    return kernel

gkernel = gkernal2(11,2)



def classify(im):
    
    im = im[10:245,10:245]

    gray_scale = convert_to_grayscale(im/255)
    
    Kx = np.array([[1, 0, -1],
                   [2, 0, -2],
                   [1, 0, -1]])
    
    Ky = np.array([[1, 2, 1],
                   [0, 0, 0],
                   [-1, -2, -1]])
    
    
    Gx = filter_2d(gray_scale, Kx)
    Gy = filter_2d(gray_scale, Ky)
    
    G_mag = np.sqrt(Gx**2+Gy**2)
    G_dir = np.arctan2(Gy, Gx)
    G_max = np.max(G_mag)
    edges = G_mag > (G_max*0.48)
    tot_value = np.sum(G_mag[np.where(G_mag > (G_max*0.48))])
    yy, xx = np.where(edges)

    obj = ['brick', 'ball','cylinder'];

    
    if  (tot_value/len(xx)) > 1.25 and (tot_value/len(xx)) <= 1.6:
        return obj[2];
    elif (tot_value/len(xx)) > 0 and (tot_value/len(xx)) <= 1.3:
        return obj[1];
    else:
        return obj[0];
